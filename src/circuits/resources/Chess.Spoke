macro ;|&?&:&;=>|(p1,p2,p3)
	if(p1) 
		return p2
	else 
		return p3
		
 

class Chess
	RoomSize=33
	Turn=WhosTurn.White
	world=create World()
	board=[[]]
	WhiteBoardPiece=0
	BlackBoardPiece=15

	WhiteRoomPos=create Location(0,0,0)
	BlackRoomPos=create Location(0,0,0)
	BoardPos=create Location(0,0,0)
	
	firstPositionX=-1
	firstPositionY=-1
	firstPiece={Piece=ChessPiece.Nothing,Color=1}


	def () 
		board.clear()
		this.ResetBoard()
	
	def Reset()
		ResetBoard()
		firstPositionX=-1
		firstPositionY=-1
		Turn = WhosTurn.White
		firstPiece={Piece=ChessPiece.Nothing,Color=1}
		Build(BoardPos.PosX,BoardPos.PosY,BoardPos.PosZ)	

	def ResetBoard()
		board.clear()
		board.add([{Piece=ChessPiece.BlackRook,Color=15},{Piece=ChessPiece.BlackKnight,Color=15},{Piece=ChessPiece.BlackBishop,Color=15},{Piece=ChessPiece.BlackQueen,Color=15},{Piece=ChessPiece.BlackKing,Color=15},{Piece=ChessPiece.BlackBishop,Color=15},{Piece=ChessPiece.BlackKnight,Color=15},{Piece=ChessPiece.BlackRook,Color=15}])
		board.add([{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.BlackPawn,Color=15}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.WhitePawn,Color=0}])
		board.add([{Piece=ChessPiece.WhiteRook,Color=0},{Piece=ChessPiece.WhiteKnight,Color=0},{Piece=ChessPiece.WhiteBishop,Color=0},{Piece=ChessPiece.WhiteKing,Color=0},{Piece=ChessPiece.WhiteQueen,Color=0},{Piece=ChessPiece.WhiteBishop,Color=0},{Piece=ChessPiece.WhiteKnight,Color=0},{Piece=ChessPiece.WhiteRook,Color=0}])
	
	def Build(startX,startY,startZ)
		BoardPos=create Location(startX,startY,startZ) 
		WhiteRoomPos=create Location(startX-RoomSize/2,(startY-1)-RoomSize,startZ-RoomSize/4)
		BlackRoomPos=create Location(startX+RoomSize/2,(startY-1)-RoomSize,startZ-RoomSize/4) 
		this.BuildBoard(startX,startY,startZ) 
		this.drawPieces(startX,startY,startZ) 
		this.BuildRoom(startX+RoomSize/2,startY-1,startZ-RoomSize/4,15,true)
		this.BuildRoom(startX-RoomSize/2,startY-1,startZ-RoomSize/4,0,false) 
	
	def makeIt(x1,y1,z1,x2,y2,z2,doit)
		a1=between(x1,x2)
		a2=between(y1,y2)
		a3=between(z1,z2)
		
		a1=>|(x)
			a2=>|(y)
				a3=>|(z)
					doit(x,y,z)
					
	def BuildBoard(startX,startY,startZ)
		currentColor=true 
		col=15
		
		fillArea(BlockType.Glowstone,startX-1,startY,startZ-1,startX+(8*3)+1,startY,startZ+(8*3)+1)
		
		m=8*3
		between(startX,startX+m)=>|(xx,b)
			between(startZ,startZ+m)=>|(zz,r)
				if (r % 3)==1 && ((b %3)==1)
					setBlock(BlockType.Glass,xx,startY,zz)
				else
					if (r % 3)==0
						currentColor=!currentColor
						if currentColor
							col=this.WhiteBoardPiece
						else
							col=this.BlackBoardPiece
					setBlockAndData(35,col,xx,startY,zz)


	def drawPieces(startX,startY,startZ)
		fillArea(0,startX,startY+1,startZ,startX+(8*3),startY+10,startZ+(8*3))
		 
		xIndex=0
		yIndex=-1
		
		
		between(startX,startX+8*3)=>|(xx,b)
			xIndex=0
			buildit=false
			if (b%3)==1
				buildit=true
				yIndex=yIndex+1
			between(startZ,startZ+8*3)=>|(zz,r)
				if ((r % 3==1) && buildit)
					setBlock(getRightPiece((board[yIndex])[xIndex].Piece),xx,startY+1,zz)
					setBlock(getRightPiece((board[yIndex])[xIndex].Piece),xx,startY+2,zz)
					setBlock(getRightPiece((board[yIndex])[xIndex].Piece),xx,startY+3,zz)
					setBlock(getRightPiece((board[yIndex])[xIndex].Piece),xx,startY+4,zz)
					if (board[yIndex])[xIndex].Piece>0
 						setBlock(BlockType.Glowstone,xx-1,startY+1,zz)
						setBlock(BlockType.Glowstone,xx+1,startY+1,zz)
						setBlock(BlockType.Glowstone,xx,startY+1,zz-1)
						setBlock(BlockType.Glowstone,xx,startY+1,zz+1)
					xIndex=xIndex+1

	def BuildRoom(mx,my,mz,cur,isBlack)
		jcj=this.RoomSize
		my=my-jcj
		print("begun")
		glow=false
		
		between(my,my+jcj)=>|(y)
			glow=false
			between(mz,mz+jcj)=>|(z)
				glow=false
				between(mx,mx+jcj)=>|(x)
					
					blk=world.getBlockAt(x,y,z)
					if y==my+jcj|| (y==my)
						blk.setType(BlockType.Glass)
					else 
						
						if isBlack && (x==mx)
							blk.setType(BlockType.Air)
						else
							if !isBlack && (x==(mx+jcj))
								blk.setType(BlockType.Air)
							else
								if (x==mx) || (x==mx+jcj)
									blk.setType(89)
								else if ((z==mz+jcj))
									if glow
										blk.setType(89)
									else
										blk.setTypeAndData(35,cur)
								else 
									if (z==mz)
										blk.setType(BlockType.Glass)
									else
										if blk.getType()!=0
											blk.setType(BlockType.Air)
					if(x%5==0)
						glow=!glow
		if !isBlack
			
			startmx=mx+jcj-3
			between(mz,mz+jcj)=>|(fq,qn)
				if(qn==jcj-10)
					between(startmx,(mx+jcj-3)+7)=>|(q,qI)
						blk=world.getBlockAt(q,my+2,fq)
						blk.setType(BlockType.Wool)
						if (qI>=3 && qI<=4)
							blk=world.getBlockAt(q,my+4+1,fq)
							blk.setType(BlockType.Glowstone)

					setBlock(35,startmx+1,my+3,fq)
					setBlock(35,startmx+2,my+3,fq)

					setBlock(BlockType.Redstone,startmx+3,my+3,fq)
					setBlock(BlockType.Redstone,startmx+4,my+3,fq)
					setBlock(BlockType.Redstone,startmx+4,my+3,fq-1)
					setMakeSignForAll(startmx+4,my+3,fq-2,"resetGame","")
										
					setBlock(35,startmx+5,my+3,fq)
					setBlock(35,startmx+6,my+3,fq)

					setStoneButton(Direction.North,startmx+2,my+4,fq)
					setStoneButton(Direction.South,startmx+5,my+4,fq)
					setBlock(35,startmx+3,my+4,fq)
					setBlock(35,startmx+4,my+4,fq)



				else
					between(startmx,(mx+jcj-3)+7)=>|(q,qI)
						blk=world.getBlockAt(q,my+1+1,fq)
						blk.setType(BlockType.Wool)
						if (qI>0 && qI<7)
							blk=world.getBlockAt(q,my+2+1,fq)
							blk.setType(BlockType.Wool)
						if (qI>1 && qI<6)
							blk=world.getBlockAt(q,my+3+1,fq)
							blk.setType(BlockType.Wool)
							if (qI>=3 && qI<=4)
								blk=world.getBlockAt(q,my+4+1,fq)
								blk.setType(BlockType.Glowstone)
												
		
		this.reBuildRoom(mx,my,mz,cur,isBlack,true)


	def reBuildRoom(x,y,z,cur,isBlack,buildOnce) 
		f=(this.RoomSize)
		if isBlack
			between(x+1,x+f-1)=>|(b)
				between(z+1,z+f-1)=>|(c)
					rm=world.getBlockAt(b,y+2,c)
					if rm.getType()==0
						setBlockAndData(35,15,b,y+2,c)
					
		else
			between(x+1,x+f-1)=>|(b)
				between(z+1,z+f-1)=>|(c)
					rm=world.getBlockAt(b,y+2,c)
					if rm.getType()==0
						setBlockAndData(35,0,b,y+2,c)

		x=x+3
		z=z+6
		
		startX=x
		startY=y
		startZ=z
		
		x=x+2
		y=y+2
		
		xInd=0
		yInd=0 
		curcol=1
		altern=false
		(x<(startX+2)+(8*3))=>
			z=startZ
			yInd=0
			altern=!altern
			(z<(startZ)+(8*3))=>
				altern=!altern
				
				if altern
					curcol=this.WhiteBoardPiece
				else
					curcol=this.BlackBoardPiece
				 
								
				setBlockAndData(BlockType.Wool,curcol,x+3,y,z+1)
				setBlock(BlockType.Glowstone,x+2,y,z+3)		
				
				if (this.Turn == WhosTurn.Black)
					setBlockAndData(BlockType.Wool,curcol,x+3,y,z+2)
					setBlockAndData(BlockType.Wool,curcol,x+3,y,z+3)			
					setBlockAndData(BlockType.Wool,curcol,x+1,y,z+1)
					setBlockAndData(BlockType.Wool,curcol,x+3,y,z+1)
					setBlockAndData(BlockType.Wool,curcol,x+1,y,z+2)
					setBlockAndData(BlockType.Wool,curcol,x+1,y,z+3)
					setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+2)
					setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+1)
					if isBlack
						if (board[yInd])[7-xInd].Color==0
							setBlock(BlockType.Glowstone,x+3,y,z+2)
							setBlock(BlockType.Glowstone,x+3,y,z+3)			
							setBlock(BlockType.Glowstone,x+1,y,z+1)
							setBlock(BlockType.Glowstone,x+3,y,z+1)
							setBlock(BlockType.Glowstone,x+1,y,z+2)
							setBlock(BlockType.Glowstone,x+1,y,z+3)
							setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+2)
							setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+1)
				if (this.Turn == WhosTurn.White)
					setBlockAndData(BlockType.Wool,curcol,x+3,y,z+2)
					setBlockAndData(BlockType.Wool,curcol,x+3,y,z+3)			
					setBlockAndData(BlockType.Wool,curcol,x+3,y,z+1)
					setBlockAndData(BlockType.Wool,curcol,x+1,y,z+1)
					setBlockAndData(BlockType.Wool,curcol,x+1,y,z+2)
					setBlockAndData(BlockType.Wool,curcol,x+1,y,z+3)
					setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+2)
					setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+1)
					if !isBlack
						if (board[7-yInd])[xInd].Color==15
							setBlock(BlockType.Glowstone,x+3,y,z+2)
							setBlock(BlockType.Glowstone,x+3,y,z+3)			
							setBlock(BlockType.Glowstone,x+1,y,z+1)
							setBlock(BlockType.Glowstone,x+3,y,z+1)
							setBlock(BlockType.Glowstone,x+1,y,z+2)
							setBlock(BlockType.Glowstone,x+1,y,z+3)
							setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+2)
							setBlockAndData(BlockType.Wool,curcol,x+2,y+1,z+1)
							 
				setBlock(BlockType.Air,x+2,y+2,z+2)
				setBlock(BlockType.Air,x+2,y+3,z+2)
				
				if (this.Turn == WhosTurn.Black)
					if (isBlack)
						if yInd==SecondBadY && 7-xInd==SecondBadX
							setBlockAndData(35,WoolColor.Blue,x+2,y+1,z+2)
						else
							if PossibleMoves.contains(create Location(7-xInd,yInd,0)) && (board[yInd][7-xInd].Color!=this.WhiteBoardPiece)
								if board[yInd][7-xInd].Color==this.WhiteBoardPiece
									setBlockAndData(35,WoolColor.Red,x+2,y+1,z+1)
									setBlockAndData(35,WoolColor.Red,x+2,y+1,z+2)
								else
									setBlockAndData(35,WoolColor.Orange,x+2,y+1,z+1)
									setBlockAndData(35,WoolColor.Orange,x+2,y+1,z+2)
								
							else if (board[yInd])[7-xInd].Color==0
								if yInd==firstPositionY && (7-xInd==firstPositionX)
									setBlockAndData(35,WoolColor.Green,x+2,y+1,z+2)
								else
									setBlock(BlockType.Glowstone,x+2,y+2,z+2)
									setBlock(BlockType.Glowstone,x+2,y+3,z+2)
				else if (this.Turn == WhosTurn.White)
					if !isBlack
						if (7-yInd)==SecondBadY && xInd==SecondBadX
							setBlockAndData(35,WoolColor.Blue,x+2,y+1,z+2)
						else
							if PossibleMoves.contains(create Location(xInd,7-yInd,0)) && (board[7-yInd][xInd].Color!=this.BlackBoardPiece)
								if board[7-yInd][xInd].Color==this.BlackBoardPiece
									setBlockAndData(35,WoolColor.Red,x+2,y+1,z+2)
									setBlockAndData(35,WoolColor.Red,x+2,y+1,z+1)
								else
									setBlockAndData(35,WoolColor.Orange,x+2,y+1,z+2)
									setBlockAndData(35,WoolColor.Orange,x+2,y+1,z+1)
							else if (board[7-yInd])[xInd].Color==15
								if (7-yInd)==firstPositionY && (xInd==firstPositionX)
									setBlockAndData(35,WoolColor.Green,x+2,y+1,z+2)
								else
									setBlock(BlockType.Glowstone,x+2,y+2,z+2)
									setBlock(BlockType.Glowstone,x+2,y+3,z+2)
	

				setBlock(0,x+2,y+3,z+1)
				setBlock(0,x+2,y+2,z+1)

				if isBlack
					if ((board[yInd])[7-xInd].Piece)==0
						setBlock(0,x+2,y+2,z+1)
					else
						if board[yInd][7-xInd].Color==15
							setBlockAndData(BlockType.Wool,0,x+2,y+1,z+1)
							setBlockAndData(BlockType.Wool,0,x+2,y+1,z+2)
						else
							setBlockAndData(BlockType.Wool,15,x+2,y+1,z+1)
							setBlockAndData(BlockType.Wool,15,x+2,y+1,z+2)
						
						setBlock(getRightPiece((board[yInd])[7-xInd].Piece),x+2,y+2,z+1)
						if board[yInd][7-xInd].Piece!=ChessPiece.WhitePawn && board[yInd][7-xInd].Piece!=ChessPiece.BlackPawn
							setBlock(getRightPiece((board[yInd])[7-xInd].Piece),x+2,y+3,z+1) 
						else
							setBlock(0,x+2,y+3,z+1) 
				else
					if ((board[7-yInd])[xInd].Piece)==0
						setBlock(0,x+2,y+2,z+1)
					else
						if board[7-yInd][xInd].Color==15
							setBlockAndData(BlockType.Wool,0,x+2,y+1,z+1)
							setBlockAndData(BlockType.Wool,0,x+2,y+1,z+2)
						else
							setBlockAndData(BlockType.Wool,15,x+2,y+1,z+1)
							setBlockAndData(BlockType.Wool,15,x+2,y+1,z+2)
						setBlock(getRightPiece(((board[7-yInd])[xInd].Piece)),x+2,y+2,z+1)
						 
						if board[7-yInd][xInd].Piece!=ChessPiece.BlackPawn && board[7-yInd][xInd].Piece!=ChessPiece.WhitePawn
							setBlock(getRightPiece((board[7-yInd])[xInd].Piece),x+2,y+3,z+1) 
						else
							setBlock(0,x+2,y+3,z+1) 
				
				if buildOnce
					setStoneButton(Direction.North,x+1,y+1,z+2)
					setStoneButton(Direction.South,x+3,y+1,z+2)

				setBlock(BlockType.Glowstone,x+2,y-1,z+1)
				setBlock(BlockType.Glowstone,x+2,y-1,z+2)
				if buildOnce
					setBlock(BlockType.Redstone,x+2,y,z+2)
					if isBlack
						setMakeSign(x+2,y,z+1,isBlack,7-xInd,yInd) 
					else
						setMakeSign(x+2,y,z+1,isBlack,xInd,7-yInd) 


				z=z+3
				yInd=yInd+1
			x=x+3
			xInd=xInd+1 
		this.BuildVerticalBoard(startX+3,startY+7,startZ-4) 
		this.drawPiecesVertical(startX+3,startY+7,startZ-4,isBlack)


	def getRightPiece(mv)
		switch mv
			ChessPiece.BlackPawn:
			ChessPiece.WhitePawn:
				return BlockType.Stone
			ChessPiece.BlackKnight:
			ChessPiece.WhiteKnight:
				return BlockType.MossyCobble
			ChessPiece.BlackKing:
			ChessPiece.WhiteKing:
				return BlockType.DiamondBlock
			ChessPiece.BlackQueen:
			ChessPiece.WhiteQueen:
				return BlockType.IronBlock
			ChessPiece.BlackBishop:
			ChessPiece.WhiteBishop:
				return BlockType.LapizBlock
			ChessPiece.BlackRook:
			ChessPiece.WhiteRook:
				return BlockType.Sandstone
		return 0
			
	def drawPiecesVertical(startX,startY,startZ,isBlack)
		fillArea(0,startX+(8*3),startY+(8*3),startZ+7,startX,startY,startZ+1)
		yIncrease=0
		xIncrease=0
		xIndex=0-1
		yIndex=0
		

		
		
		((startY+yIncrease)<startY+(8*3))=>
			xIncrease=0
			yIndex=0
			buildit=false

			if (yIncrease%3)==1
				buildit=true
				xIndex=xIndex+1

			(startX+xIncrease<startX+(8*3))=>

				if (((xIncrease % 3)==1) && buildit) 
					bxIndex=xIndex
					if isBlack
						bxIndex=7-xIndex
					byIndex=yIndex
					if isBlack
						byIndex=7-yIndex
					setBlock(getRightPiece((board[bxIndex])[byIndex].Piece),startX+xIncrease,startY+yIncrease,startZ+1)
					setBlock(getRightPiece((board[bxIndex])[byIndex].Piece),startX+xIncrease,startY+yIncrease,startZ+2)
					setBlock(getRightPiece((board[bxIndex])[byIndex].Piece),startX+xIncrease,startY+yIncrease,startZ+3)


					if (board[bxIndex])[byIndex].Piece>0
						if !isBlack  && ((board[bxIndex])[byIndex].Color==15)
							setBlock(BlockType.Glowstone,startX+xIncrease-1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease+1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease,startY+yIncrease-1,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease,startY+yIncrease+1,startZ+1)

						if isBlack && ((board[bxIndex])[byIndex].Color==0)
							setBlock(BlockType.Glowstone,startX+xIncrease-1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease+1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease,startY+yIncrease-1,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease,startY+yIncrease+1,startZ+1)

					yIndex=yIndex+1
				xIncrease=xIncrease+1
			yIncrease=yIncrease+1




	def BuildVerticalBoard(startX,startY,startZ)
		fillArea(BlockType.Glowstone,startX-1,startY-1,startZ-1,startX+(8*3),startY+(8*3),startZ)
	
		currentColor=true
		yIncrease=0
		xIncrease=0
		col=15
		((startX+xIncrease)<startX+(8*3))=>
			yIncrease=0
			if (xIncrease%3)==0
				currentColor=!currentColor
				if currentColor
					col=this.WhiteBoardPiece
				else
					col=this.BlackBoardPiece

			(startY+yIncrease<startY+(8*3))=>
				if (yIncrease % 3)==1 && ((xIncrease %3)==1)
					setBlock(BlockType.Glass,startX+xIncrease,startY+yIncrease,startZ)
				else
					if (yIncrease % 3)==0
						currentColor=!currentColor
						if currentColor
							col=this.WhiteBoardPiece
						else
							col=this.BlackBoardPiece
					setBlockAndData(35,col,startX+xIncrease,startY+yIncrease,startZ)
				yIncrease=yIncrease+1
			xIncrease=xIncrease+1

	

	PossibleMoves=create Location[]
	
	def playAPiece(x,y,isBlack)
		if (isBlack && (Turn==WhosTurn.White)) || (!isBlack && (Turn==WhosTurn.Black))
			print("doin this")
			return

		SecondBadX=-1
		SecondBadY=-1

		if WhosTurn.White==Turn
			print("WhitsTurn")
		else
			print("Balcks Turn")
				
		if(firstPiece.Piece==0)
			PossibleMoves.clear()
			print("first")
			if Turn==WhosTurn.Black
				if ((board[y])[x]).Color==this.BlackBoardPiece
					return
			else
				if ((board[y])[x]).Color==this.WhiteBoardPiece
					return
			print("blast")
			firstPiece=(board[y])[x]
			print(firstPiece)
			firstPositionX=x
			firstPositionY=y
			if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteRook) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackRook)
				dont=false
				between(firstPositionY,7)=>|(m)
					if board[m][x].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[m][x].Piece==0 
						PossibleMoves.add(create Location(x,m,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true
				dont=false
				between(firstPositionY,0)=>|(m)
					if board[m][x].Piece==board[firstPositionY][firstPositionX].Piece
				
					else if (!dont)&& board[m][x].Piece==0 
						PossibleMoves.add(create Location(x,m,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true

				dont=false
				between(firstPositionX,7)=>|(m)
					if board[y][m].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[y][m].Piece==0 
						PossibleMoves.add(create Location(m,y,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true
				dont=false
				between(firstPositionX,0)=>|(m)
					if board[y][m].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[y][m].Piece==0 
						PossibleMoves.add(create Location(m,y,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true
				print(PossibleMoves)


			if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteBishop) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackBishop)
				print("doing bishop")
				dont=false
				between(1,7)=>|(f)
					if((firstPositionY+f)<8 && (firstPositionX+f) < 8)
						print("1 posx "+(firstPositionX+f)+" posy "+(firstPositionY+f))
						if !dont &&  (board[firstPositionY+f][firstPositionX+f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY+f ,0))
						else if !dont &&  (board[firstPositionY+f][firstPositionX+f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY+f ,0))
					 		dont=true
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("2 posx "+(firstPositionX-f)+" posy "+(firstPositionY+f))
					if((firstPositionY-f)>-1 && (firstPositionX+f) < 8)
						if !dont &&  (board[firstPositionY-f][firstPositionX+f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY-f ,0))
					 	else if !dont &&  (board[firstPositionY-f][firstPositionX+f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY-f ,0))
					 		dont=true
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("3 posx "+(firstPositionX+f)+" posy "+(firstPositionY-f))
					if((firstPositionY+f)<8 && (firstPositionX-f) > -1)
						if !dont &&  (board[firstPositionY+f][firstPositionX-f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY+f ,0))
					 	else if !dont &&  (board[firstPositionY+f][firstPositionX-f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY+f ,0))
					 		dont=true
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("4 posx "+(firstPositionX-f)+" posy "+(firstPositionY-f))
					if((firstPositionY-f)>-1 && (firstPositionX-f) >-1)
						if !dont &&  (board[firstPositionY-f][firstPositionX-f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY-f ,0))
					 	else if !dont &&  (board[firstPositionY-f][firstPositionX-f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY-f ,0))
					 		dont=true
					 	else
					 		dont=true
				

			if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteKnight) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackKnight)
				PossibleMoves.add(create Location(firstPositionX-2,firstPositionY-1 ,0))
				PossibleMoves.add(create Location(firstPositionX-2,firstPositionY+1 ,0))
				PossibleMoves.add(create Location(firstPositionX+2,firstPositionY-1 ,0))
				PossibleMoves.add(create Location(firstPositionX+2,firstPositionY+1 ,0))
				PossibleMoves.add(create Location(firstPositionX-1,firstPositionY-2 ,0))
				PossibleMoves.add(create Location(firstPositionX-1,firstPositionY+2 ,0))
				PossibleMoves.add(create Location(firstPositionX+1,firstPositionY-2 ,0))
				PossibleMoves.add(create Location(firstPositionX+1,firstPositionY+2 ,0))

			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteKing) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackKing)
				
				PossibleMoves.add(create Location(firstPositionX+1,firstPositionY+1 ,0))
				PossibleMoves.add(create Location(firstPositionX+1,firstPositionY+0 ,0))
				PossibleMoves.add(create Location(firstPositionX+1,firstPositionY-1 ,0))
				PossibleMoves.add(create Location(firstPositionX+0,firstPositionY+1 ,0))
				PossibleMoves.add(create Location(firstPositionX+0,firstPositionY-1 ,0))
				PossibleMoves.add(create Location(firstPositionX-1,firstPositionY+1 ,0))
				PossibleMoves.add(create Location(firstPositionX-1,firstPositionY+0 ,0))
				PossibleMoves.add(create Location(firstPositionX-1,firstPositionY-1 ,0))

			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteQueen) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackQueen)
				dont=false
				between(firstPositionY,7)=>|(m)
					if board[m][x].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[m][x].Piece==0 
						PossibleMoves.add(create Location(x,m,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true
				dont=false
				between(firstPositionY,0)=>|(m)
					if board[m][x].Piece==board[firstPositionY][firstPositionX].Piece
				
					else if (!dont)&& board[m][x].Piece==0 
						PossibleMoves.add(create Location(x,m,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true

				dont=false
				between(firstPositionX,7)=>|(m)
					if board[y][m].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[y][m].Piece==0 
						PossibleMoves.add(create Location(m,y,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true
				dont=false
				between(firstPositionX,0)=>|(m)
					if board[y][m].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[y][m].Piece==0 
						PossibleMoves.add(create Location(m,y,0))
					else if (!dont)&& board[m][x].Color!=board[firstPositionY][firstPositionX].Color 
						PossibleMoves.add(create Location(x,m,0))
						dont=true
					else
						dont=true
				dont=false
				between(1,7)=>|(f)
					if((firstPositionY+f)<8 && (firstPositionX+f) < 8)
						print("1 posx "+(firstPositionX+f)+" posy "+(firstPositionY+f))
						if !dont &&  (board[firstPositionY+f][firstPositionX+f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY+f ,0))
						else if !dont &&  (board[firstPositionY+f][firstPositionX+f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY+f ,0))
					 		dont=true
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("2 posx "+(firstPositionX-f)+" posy "+(firstPositionY+f))
					if((firstPositionY-f)>-1 && (firstPositionX+f) < 8)
						if !dont &&  (board[firstPositionY-f][firstPositionX+f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY-f ,0))
					 	else if !dont &&  (board[firstPositionY-f][firstPositionX+f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY-f ,0))
					 		dont=true
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("3 posx "+(firstPositionX+f)+" posy "+(firstPositionY-f))
					if((firstPositionY+f)<8 && (firstPositionX-f) > -1)
						if !dont &&  (board[firstPositionY+f][firstPositionX-f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY+f ,0))
					 	else if !dont &&  (board[firstPositionY+f][firstPositionX-f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY+f ,0))
					 		dont=true
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("4 posx "+(firstPositionX-f)+" posy "+(firstPositionY-f))
					if((firstPositionY-f)>-1 && (firstPositionX-f) >-1)
						if !dont &&  (board[firstPositionY-f][firstPositionX-f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY-f ,0))
					 	else if !dont &&  (board[firstPositionY-f][firstPositionX-f].Color!=board[firstPositionY][firstPositionX].Color)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY-f ,0))
					 		dont=true
					 	else
					 		dont=true
				



			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhitePawn)
				if !( board[firstPositionY-1][firstPositionX].Color==this.BlackBoardPiece)
					PossibleMoves.add(create Location(firstPositionX,firstPositionY-1,0))
				if( board[firstPositionY-1][firstPositionX+1].Color==this.BlackBoardPiece)
					PossibleMoves.add(create Location(firstPositionX+1,firstPositionY-1,0))
				if( board[firstPositionY-1][firstPositionX-1].Color==this.BlackBoardPiece)
					PossibleMoves.add(create Location(firstPositionX-1,firstPositionY-1,0))
					
				if(firstPositionY==6)
					PossibleMoves.add(create Location(firstPositionX,firstPositionY-2,0))
			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackPawn)
				if !( board[firstPositionY-1][firstPositionX].Color==this.WhiteBoardPiece)
					PossibleMoves.add(create Location(firstPositionX,firstPositionY+1,0))

				if( board[firstPositionY+1][firstPositionX+1].Color==this.WhiteBoardPiece)
					PossibleMoves.add(create Location(firstPositionX+1,firstPositionY+1,0))
				if( board[firstPositionY+1][firstPositionX-1].Color==this.WhiteBoardPiece)
					PossibleMoves.add(create Location(firstPositionX-1,firstPositionY+1,0))
				if(firstPositionY==1)
					PossibleMoves.add(create Location(firstPositionX,firstPositionY+2,0))

		else
			if(x==firstPositionX && (y==firstPositionY))
				firstPositionX=-1
				firstPositionY=-1
				firstPiece={Piece=ChessPiece.Nothing,Color=1}
				PossibleMoves.clear()
			else if PossibleMoves.contains(create Location(x,y,0))
				placeActualPiece(x,y)
				PossibleMoves.clear()
			else
				SecondBadX=x
				SecondBadY=y
		

		this.reBuildRoom(WhiteRoomPos.PosX,WhiteRoomPos.PosY,WhiteRoomPos.PosZ,0,false,false)
		this.reBuildRoom(BlackRoomPos.PosX,BlackRoomPos.PosY,BlackRoomPos.PosZ,15,true,false)
		this.BuildBoard(BoardPos.PosX,BoardPos.PosY,BoardPos.PosZ)
		this.drawPieces(BoardPos.PosX,BoardPos.PosY,BoardPos.PosZ)
		
	SecondBadX=-1
	SecondBadY=-1

	def placeActualPiece(x,y)
		(board[y])[x]=firstPiece
		(board[firstPositionY])[firstPositionX]={Piece=ChessPiece.Nothing,Color=1}
		firstPositionX=-1
		firstPositionY=-1
		firstPiece={Piece=0,Color=1}
	
		if Turn==WhosTurn.White
			Turn=WhosTurn.Black
		else
			Turn=WhosTurn.White
	
		if WhosTurn.White==Turn
			print("WhitsTurn")
		else
			print("Balcks Turn")

	def static buildIt(int startX,int startY, int startZ,bool tick)
		if tick
			global.ChessGame.Build(startX,startY,startZ)

	def static resetGame(bool tick)
		if tick
			global.ChessGame.Reset()

	def static whiteRoom(int startX,int startY, int startZ,bool tick)
		if tick
			global.ChessGame.BuildRoom(startX,startY,startZ,0,false)

	def static blackRoom(int startX,int startY, int startZ,bool tick)
		if tick 
			global.ChessGame.BuildRoom(startX,startY,startZ,15,true)

	def static playPiece(int X,int Y,bool black,bool tick)
		if tick 
			print(tick+"  diiiidplay")
			global.ChessGame.playAPiece(X,Y,black)
			


	def setBlock(blockType,x,y,z)
		world.getBlockAt(x,y,z).setType(blockType)

	def setMakeSign(x,y,z,isBlack,posX,posY)
		
		world.getBlockAt(x,y,z).makeSign(["AAA|SPOKE","[MC5002]","Chess-playPiece",posX+"-"+posY+"-"+isBlack])

	def setMakeSignForAll(x,y,z,methodtocall,params)
		world.getBlockAt(x,y,z).makeSign(["AAA|SPOKE","[MC5002]","Chess-"+methodtocall,params])

	def setStoneButton(ind,x,y,z)
		world.getBlockAt(x,y,z).makeStoneButton(ind)


	def setBlockAndData(blockType,data,x,y,z)
		world.getBlockAt(x,y,z).setTypeAndData(blockType,data)



	def fillArea(type,startX,startY,startZ,endX,endY,endZ)
		print("start fill ")
		
		
		a1=between(startX,endX)
		a2=between(startY,endY)
		a3=between(startZ,endZ)
		
		
		a1=>|(x)
			a2=>|(y)
				a3=>|(z)
					blk=world.getBlockAt(x,y,z)
					blk.setType(type)

	def fillAreaIf(type,typeIf,startX,startY,startZ,endX,endY,endZ)
		print("start fill ")
		a1=between(startX,endX)
		a2=between(startY,endY)
		a3=between(startZ,endZ)
	
		a1=>|(x)
			a2=>|(y)
				a3=>|(z)
					blk=world.getBlockAt(x,y,z)
					if typeIf==blk.getType()
						blk.setType(type)
	
	
	def fillAreaQuery(query,startX,startY,startZ,endX,endY,endZ)
		print("start fill ")
		a1=between(startX,endX)
		a2=between(startY,endY)
		a3=between(startZ,endZ)
		
		a1=>|(x)
			a2=>|(y)
				a3=>|(z)
					blk=world.getBlockAt(x,y,z)
					gm=query(x,y,z,blk)
					if(gm!=blk)
						blk.setType(gm)


	def between(in1,in2)
		arn=[]
		if(in1>=in2)
			(in1>=in2)=>
				arn.add(in1)
				in1=in1-1
		else
			(in1<=in2)=>
				arn.add(in1)
				in1=in1+1
		return arn

	def betweenCount(in1,in2,count)
		arn=[]
		if(in1>=in2)
			(in1>=in2)=>
				arn.add(in1)
				in1=in1-count
		else
			(in1<=in2)=>
				arn.add(in1)
				in1=in1+count
		return arn

class Location
	PosX=0
	PosY=0
	PosZ=0
	def (xx,yy,zz)
		PosX=xx
		PosY=yy
		PosZ=zz
	

global
	ChessGame=create Chess()


enum BlockType
	Glowstone=89
	Obsidian=49
	Wool=35
	Redstone=55
	Sign=68
	Snow=78
	StoneButton=77
	Glass=20
	Air=0
	DiamondBlock=57
	IronBlock=42
	Stone=1
	Sandstone=24
	MossyCobble=48
	LapizBlock=22

enum WhosTurn
	White=0
	Black=1


enum Direction 
	North=0
	West=1
	South=2
	East=3

enum ChessPiece
	Nothing=0
	WhiteRook=4
	WhiteKing=5
	WhiteQueen=24
	WhiteBishop=21
	WhiteKnight=48
	WhitePawn=86
	BlackRook=57
	BlackKing=58
	BlackQueen=42
	BlackBishop=82
	BlackKnight=84
	BlackPawn=61
enum WoolColor
	White= 0
	Orange= 1
	Magenta = 2
	LightBlue=3
	Yellow= 4
	Lime = 5
	Pink = 6
	Gray = 7
	Silver= 8
	Cyan = 9
	Purple= 10
	Blue =11
	Brown = 12
	Green= 13
	Red = 14
	Black=15
