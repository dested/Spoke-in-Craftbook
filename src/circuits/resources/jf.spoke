macro ;|&?&:&;=>|(p1,p2,p3)
	if(p1) 
		return p2
	else 
		return p3
		
 

class Chess
	
	RoomSize=35
	Turn=WhosTurn.White
	world=create World()
	board=[[]]
	WhiteBoardPiece=0
	BlackBoardPiece=15
	WhiteRoomPos=create Location(0,0,0)
	BlackRoomPos=create Location(0,0,0)
	BoardPos=create Location(0,0,0)
	
	firstPositionX=-1
	firstPositionY=-1
	firstPiece={Piece=ChessPiece.Nothing,Color=1}

	def () 
		board.clear()
		this.ResetBoard()

	def ResetBoard()
		board.clear()
		board.add([{Piece=ChessPiece.BlackRook,Color=15},{Piece=ChessPiece.BlackKnight,Color=15},{Piece=ChessPiece.BlackBishop,Color=15},{Piece=ChessPiece.BlackQueen,Color=15},{Piece=ChessPiece.BlackKing,Color=15},{Piece=ChessPiece.BlackBishop,Color=15},{Piece=ChessPiece.BlackKnight,Color=15},{Piece=ChessPiece.BlackRook,Color=15}])
		board.add([{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.BlackPawn,Color=15},{Piece=ChessPiece.BlackPawn,Color=15}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1},{Piece=ChessPiece.Nothing,Color=1}])
		board.add([{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0},{Piece=ChessPiece.WhitePawn,Color=0}])
		board.add([{Piece=ChessPiece.WhiteRook,Color=0},{Piece=ChessPiece.WhiteKnight,Color=0},{Piece=ChessPiece.WhiteBishop,Color=0},{Piece=ChessPiece.WhiteKing,Color=0},{Piece=ChessPiece.WhiteQueen,Color=0},{Piece=ChessPiece.WhiteBishop,Color=0},{Piece=ChessPiece.WhiteKnight,Color=0},{Piece=ChessPiece.WhiteRook,Color=0}])
	
	def Build(startX,startY,startZ)
		BoardPos=create Location(startX,startY,startZ) 
		WhiteRoomPos=create Location((startX-18),((startY-1)-35),(startZ-9))
		BlackRoomPos=create Location((startX+18),((startY-1)-35),(startZ-9))
	
		this.BuildBoard(startX,startY,startZ) 
		this.drawPieces(startX,startY,startZ)
		print("whiteRoom")
		this.BuildRoom(startX-18,startY-1,startZ-9,0,false)
		print("blackeRoom")
		this.BuildRoom(startX+18,startY-1,startZ-9,15,true)
	
	def makeIt(x1,y1,z1,x2,y2,z2,doit)
		a1=between(x1,x2)
		a2=between(y1,y2)
		a3=between(z1,z2)
		
		a1=>|(x)
			print(x)
			a2=>|(y)
				a3=>|(z)
					doit(x,y,z)
					
	def BuildBoard(startX,startY,startZ)
		currentColor=true
		zIncrease=0
		xIncrease=0
		col=15
		
		fillArea(BlockType.Glowstone,startX-1,startY,startZ-1,startX+(8*3)+1,startY,startZ+(8*3)+1)
		
		((startX+xIncrease)<startX+(8*3))=>
			zIncrease=0
			if (xIncrease%3)==0
				currentColor=!currentColor
				if currentColor
					col=this.WhiteBoardPiece
				else
					col=this.BlackBoardPiece


			(startZ+zIncrease<startZ+(8*3))=>
				if (zIncrease % 3)==1 && ((xIncrease %3)==1)
					setBlock(BlockType.Glass,startX+xIncrease,startY,startZ+zIncrease)
				else
					if (zIncrease % 3)==0
						currentColor=!currentColor
						if currentColor
							col=this.WhiteBoardPiece
						else
							col=this.BlackBoardPiece
					setBlockAndData(35,col,startX+xIncrease,startY,startZ+zIncrease)
				zIncrease=zIncrease+1
			xIncrease=xIncrease+1

	def drawPieces(startX,startY,startZ)
		fillArea(0,startX,startY+1,startZ,startX+(8*3),startY+10,startZ+(8*3))
		
		zIncrease=0
		xIncrease=0
		xIndex=0
		yIndex=-1
		((startX+xIncrease)<(startX+(8*3)))=>
			zIncrease=0
			xIndex=0
			buildit=false
			if (xIncrease%3)==1
				buildit=true
				yIndex=yIndex+1
			(startZ+zIncrease<startZ+(8*3))=>
				if (((zIncrease % 3)==1) && buildit)
					setBlock((board[yIndex])[xIndex].Piece,startX+xIncrease,startY+1,startZ+zIncrease)
					setBlock((board[yIndex])[xIndex].Piece,startX+xIncrease,startY+2,startZ+zIncrease)
					setBlock((board[yIndex])[xIndex].Piece,startX+xIncrease,startY+3,startZ+zIncrease)
					setBlock((board[yIndex])[xIndex].Piece,startX+xIncrease,startY+4,startZ+zIncrease)
					if (board[yIndex])[xIndex].Piece>0
 						setBlock(BlockType.Glowstone,startX+xIncrease-1,startY+1,startZ+zIncrease)
						setBlock(BlockType.Glowstone,startX+xIncrease+1,startY+1,startZ+zIncrease)
						setBlock(BlockType.Glowstone,startX+xIncrease,startY+1,startZ+zIncrease-1)
						setBlock(BlockType.Glowstone,startX+xIncrease,startY+1,startZ+zIncrease+1)
					xIndex=xIndex+1
				zIncrease=zIncrease+1
			xIncrease=xIncrease+1

	def BuildRoom(x,y,z,cur,isBlack)
		jcj=this.RoomSize
		y=y-jcj
		startX=x
		startY=y
		startZ=z
		print("begun")
		glow=false
		(x<=startX+jcj)=>
			print("printX "+x)
			z=startZ
			(z<=startZ+jcj)=>
				y=startY
				(y<=startY+jcj)=>
					blk=world.getBlockAt(x,y,z)
					if y==startY+jcj|| (y==startY)
						if glow
							blk.setType(BlockType.Glass)
						else
							blk.setTypeAndData(35,cur)
					else 
						
						if isBlack && (x==startX)
							blk.setType(BlockType.Glass)
						else
							if !isBlack && (x==(startX+jcj))
								blk.setType(BlockType.Glass)
							else
								if ((x==startX) || (x==startX+jcj) || (z==startZ+jcj))
									if glow
										blk.setType(89)
									else
										blk.setTypeAndData(35,cur)
								else 
									if (z==startZ)
										blk.setType(20)
									else
										if blk.getType()!=0
											blk.setType(0)
					y=y+1
					glow=!glow
				z=z+1
			x=x+1

		this.reBuildRoom(startX,startY,startZ,cur,isBlack,true)


	def reBuildRoom(x,y,z,cur,isBlack,buildOnce) 
		startX=x
		startY=y
		startZ=z
		
		x=x+2
		y=y+2
		
		xInd=0
		yInd=0 
		(x<(startX+2)+(8*3))=>
			z=startZ+5
			yInd=0
			(z<(startZ+5)+(8*3))=>
				setBlock(BlockType.Obsidian,x+3,y,z+1)
				setBlock(BlockType.Obsidian,x+3,y,z+2)
				setBlock(BlockType.Obsidian,x+3,y,z+3)			
				setBlock(BlockType.Glowstone,x+2,y,z+3)
				
				
				setBlock(BlockType.Obsidian,x+1,y,z+1)
				setBlock(BlockType.Obsidian,x+1,y,z+2)
				setBlock(BlockType.Obsidian,x+1,y,z+3)
				
				setBlock(BlockType.Obsidian,x+2,y+1,z+2)
				 
				if (this.Turn == WhosTurn.Black)
					if (isBlack)
						if PossibleMoves.contains(create Location(xInd,yInd,0))
							setBlockAndData(35,9,x+2,y+1,z+2)
						else if (board[yInd])[xInd].Color==0
							if yInd==SecondBadY && xInd==SecondBadX
								setBlockAndData(35,9,x+2,y+1,z+2)
							else
								if yInd==firstPositionY && (xInd==firstPositionX)
									setBlockAndData(35,4,x+2,y+1,z+2)
								else
									setBlock(BlockType.Glowstone,x+2,y+1,z+2)
				else 
					if (this.Turn == WhosTurn.White)
						if !isBlack
							if (7-yInd)==SecondBadY && xInd==SecondBadX
								setBlockAndData(35,9,x+2,y+1,z+2)
							else
								if PossibleMoves.contains(create Location(xInd,7-yInd,0))
									print("JJJ")
									setBlockAndData(35,9,x+2,y+1,z+2)
								else if (board[7-yInd])[xInd].Color==15
									if (7-yInd)==firstPositionY && (xInd==firstPositionX)
										setBlockAndData(35,4,x+2,y+1,z+2)
									else
										setBlock(BlockType.Glowstone,x+2,y+1,z+2)
	
				if isBlack
					if ((board[yInd])[xInd].Piece)==0
						setBlockAndData(35,cur,x+2,y+1,z+1)
						setBlock(0,x+2,y+2,z+1)
					else
						setBlock(((board[yInd])[xInd].Piece),x+2,y+1,z+1)
						setBlock(((board[yInd])[xInd].Piece),x+2,y+2,z+1) 
				else
					if ((board[7-yInd])[xInd].Piece)==0
						setBlockAndData(35,cur,x+2,y+1,z+1)
						setBlock(0,x+2,y+2,z+1)
					else
						setBlock(((board[7-yInd])[xInd].Piece),x+2,y+1,z+1)
						setBlock(((board[7-yInd])[xInd].Piece),x+2,y+2,z+1) 
				if buildOnce
					setStoneButton(Direction.North,x+1,y+1,z+2)

				setBlock(BlockType.Glowstone,x+2,y-1,z+1)
				setBlock(BlockType.Glowstone,x+2,y-1,z+2)
				if buildOnce
					setBlock(BlockType.Redstone,x+2,y,z+2)

				if buildOnce
					if isBlack
						setMakeSign(x+2,y,z+1,isBlack,xInd,yInd) 
					else
						setMakeSign(x+2,y,z+1,isBlack,xInd,7-yInd) 


				z=z+3
				yInd=yInd+1
			x=x+3
			xInd=xInd+1 
		this.BuildVerticalBoard(startX+3,startY+7,startZ+3) 
		this.drawPiecesVertical(startX+3,startY+7,startZ+3,isBlack)

	def drawPiecesVertical(startX,startY,startZ,isBlack)
		fillArea(0,startX+(8*3),startY+(8*3),startZ+7,startX,startY,startZ+1)
		yIncrease=0
		xIncrease=0
		xIndex=0-1
		yIndex=0
		((startY+yIncrease)<startY+(8*3))=>
			xIncrease=0
			yIndex=0
			buildit=false

			if (yIncrease%3)==1
				buildit=true
				xIndex=xIndex+1

			(startX+xIncrease<startX+(8*3))=>

				if (((xIncrease % 3)==1) && buildit) 
					bxIndex=xIndex
					if isBlack
						bxIndex=7-xIndex
					
					setBlock((board[bxIndex])[yIndex].Piece,startX+xIncrease,startY+yIncrease,startZ+1)
					setBlock((board[bxIndex])[yIndex].Piece,startX+xIncrease,startY+yIncrease,startZ+2)
					setBlock((board[bxIndex])[yIndex].Piece,startX+xIncrease,startY+yIncrease,startZ+3)


					if (board[bxIndex])[yIndex].Piece>0
						if !isBlack  && ((board[bxIndex])[yIndex].Color==15)
							setBlock(BlockType.Glowstone,startX+xIncrease-1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease+1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease,startY+yIncrease-1,startZ+1)

						if isBlack && ((board[bxIndex])[yIndex].Color==0)
							setBlock(BlockType.Glowstone,startX+xIncrease-1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease+1,startY+yIncrease,startZ+1)
							setBlock(BlockType.Glowstone,startX+xIncrease,startY+yIncrease-1,startZ+1)

					yIndex=yIndex+1
				xIncrease=xIncrease+1
			yIncrease=yIncrease+1




	def BuildVerticalBoard(startX,startY,startZ)
		fillArea(BlockType.Glowstone,startX-1,startY-1,startZ-1,startX+(8*3)+1,startY+(8*3)+1,startZ)
	
		currentColor=true
		yIncrease=0
		xIncrease=0
		col=15
		((startX+xIncrease)<startX+(8*3))=>
			yIncrease=0
			if (xIncrease%3)==0
				currentColor=!currentColor
				if currentColor
					col=this.WhiteBoardPiece
				else
					col=this.BlackBoardPiece

			(startY+yIncrease<startY+(8*3))=>
				if (yIncrease % 3)==1 && ((xIncrease %3)==1)
					setBlock(BlockType.Glass,startX+xIncrease,startY+yIncrease,startZ)
				else
					if (yIncrease % 3)==0
						currentColor=!currentColor
						if currentColor
							col=this.WhiteBoardPiece
						else
							col=this.BlackBoardPiece
					setBlockAndData(35,col,startX+xIncrease,startY+yIncrease,startZ)
				yIncrease=yIncrease+1
			xIncrease=xIncrease+1

	

	PossibleMoves=create Location[]
	
	def playAPiece(x,y,isBlack)
		if (isBlack && (Turn==WhosTurn.White)) || (!isBlack && (Turn==WhosTurn.Black))
			print("doin this")
			return

		SecondBadX=-1
		SecondBadY=-1

		if WhosTurn.White==Turn
			print("WhitsTurn")
		else
			print("Balcks Turn")
		
		print("ttrryinngsdcsdfsdfg")				
		if(firstPiece.Piece==0)
			PossibleMoves.clear()
			print("first")
			if Turn==WhosTurn.Black
				if ((board[y])[x]).Color==this.BlackBoardPiece
					return
			else
				if ((board[y])[x]).Color==this.WhiteBoardPiece
					return
			print("blast")
			firstPiece=(board[y])[x]
			print(firstPiece)
			firstPositionX=x
			firstPositionY=y
			if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteRook) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackRook)
				dont=false
				between(firstPositionY,7)=>|(m)
					if board[m][x].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[m][x].Piece==0 
						PossibleMoves.add(create Location(x,m,0))
					else
						dont=true
				dont=false
				between(firstPositionY,0)=>|(m)
					if board[m][x].Piece==board[firstPositionY][firstPositionX].Piece
				
					else if (!dont)&& board[m][x].Piece==0 
						PossibleMoves.add(create Location(x,m,0))
					else
						dont=true

				dont=false
				between(firstPositionX,7)=>|(m)
					if board[y][m].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[y][m].Piece==0 
						PossibleMoves.add(create Location(m,y,0))
					else
						dont=true
				dont=false
				between(firstPositionX,0)=>|(m)
					if board[y][m].Piece==board[firstPositionY][firstPositionX].Piece
						
					else if (!dont)&& board[y][m].Piece==0 
						PossibleMoves.add(create Location(m,y,0))
					else
						dont=true
				print(PossibleMoves)


			if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteBishop) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackBishop)
				print("doing bishop")
				dont=false
				between(1,7)=>|(f)
					if((firstPositionY+f)<8 && (firstPositionX+f) < 8)
						print("1 posx "+(firstPositionX+f)+" posy "+(firstPositionX+f))
						if !dont &&  (board[firstPositionY+f][firstPositionX+f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY+f ,0))
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("2 posx "+(firstPositionX-f)+" posy "+(firstPositionX+f))
					if((firstPositionY-f)>-1 && (firstPositionX+f) < 8)
						if !dont &&  (board[firstPositionY+f][firstPositionX+f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX+f,firstPositionY-f ,0))
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("3 posx "+(firstPositionX+f)+" posy "+(firstPositionX-f))
					if((firstPositionY+f)<8 && (firstPositionX-f) > -1)
						if !dont &&  (board[firstPositionY+f][firstPositionX-f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY+f ,0))
					 	else
					 		dont=true
				dont=false
				between(1,7)=>|(f)
					print("4 posx "+(firstPositionX-f)+" posy "+(firstPositionX-f))
					if((firstPositionY-f)>-1 && (firstPositionX-f) >-1)
						if !dont &&  (board[firstPositionY-f][firstPositionX-f].Piece==ChessPiece.Nothing)
					 		PossibleMoves.add(create Location(firstPositionX-f,firstPositionY-f ,0))
					 	else
					 		dont=true
				

			if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteKnight) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackKnight)
				PossibleMoves.add(create Location(firstPositionX-2,firstPositionY-1 ,0))
				PossibleMoves.add(create Location(firstPositionX-2,firstPositionY+1 ,0))
				PossibleMoves.add(create Location(firstPositionX+2,firstPositionY-1 ,0))
				PossibleMoves.add(create Location(firstPositionX+2,firstPositionY+1 ,0))
				PossibleMoves.add(create Location(firstPositionX-1,firstPositionY-2 ,0))
				PossibleMoves.add(create Location(firstPositionX-1,firstPositionY+2 ,0))
				PossibleMoves.add(create Location(firstPositionX+1,firstPositionY-2 ,0))
				PossibleMoves.add(create Location(firstPositionX+1,firstPositionY+2 ,0))

			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhitePawn)
				if board[firstPositionY-1][firstPositionX].Piece==0
					PossibleMoves.add(create Location(firstPositionX,firstPositionY-1,0))
				if board[firstPositionY-2][firstPositionX].Piece==0
					PossibleMoves.add(create Location(firstPositionX,firstPositionY-2,0))
			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackPawn)
				if  board[firstPositionY+1][firstPositionX].Piece==0
					PossibleMoves.add(create Location(firstPositionX,firstPositionY+1,0))
				if board[firstPositionY+2][firstPositionX].Piece==0
					PossibleMoves.add(create Location(firstPositionX,firstPositionY+2,0))

		else
			if(x==firstPositionX && (y==firstPositionY))
				firstPositionX=-1
				firstPositionY=-1
				firstPiece={Piece=ChessPiece.Nothing,Color=1}
			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteRook) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackRook)
				print("rook")
				if !(y==firstPositionY || (x==firstPositionX))
					SecondBadX=x
					SecondBadY=y
				else
					placeActualPiece(x,y)
			else if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteKing) || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackKing)
				print("king")
				if !(y==firstPositionY-1 || y==firstPositionY || x==firstPositionX-1 || x==firstPositionX || y==firstPositionY+1 || x==firstPositionX+1 )
					SecondBadX=x
					SecondBadY=y
				else
					placeActualPiece(x,y)
			else 
				if ((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteQueen || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackQueen)
					print("qieen")
					if !((MathABS(y-firstPositionY)==MathABS(x-firstPositionX)) || (y==firstPositionY || (x==firstPositionX)))
						SecondBadX=x
						SecondBadY=y
					else
						placeActualPiece(x,y)
				else 
					if ((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteBishop || (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackBishop)
						if !(MathABS(y-firstPositionY)==MathABS(x-firstPositionX))
							SecondBadX=x
							SecondBadY=y
						else
							placeActualPiece(x,y)
					else 
						if (((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhiteKnight) || ((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackKnight
							if !((y==firstPositionY-1 && (x==firstPositionX-2)) || (y==firstPositionY+1 && (x==firstPositionX-2)) || (y==firstPositionY-1 && (x==firstPositionX+2)) || (y==firstPositionY+1 && (x==firstPositionX+2)) || (y==firstPositionY-2 && (x==firstPositionX-1)) || (y==firstPositionY+2 && (x==firstPositionX-1)) || (y==firstPositionY-2 && (x==firstPositionX+1)) || (y==firstPositionY+2 && (x==firstPositionX+1)))
								SecondBadX=x
								SecondBadY=y
							else
								placeActualPiece(x,y)
						else 
							if ((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.WhitePawn
								print("[awn")
								if !(y+2==firstPositionY || (y+1==firstPositionY))
									SecondBadX=x
									SecondBadY=y
								else
									placeActualPiece(x,y)
							else 
								if ((board[firstPositionY])[firstPositionX]).Piece==ChessPiece.BlackPawn
									print("[bbbawn")
									if !(y-2==firstPositionY || (y-1==firstPositionY))
										SecondBadX=x
										SecondBadY=y
									else
										placeActualPiece(x,y)
								
				
	
		this.reBuildRoom(WhiteRoomPos.PosX,WhiteRoomPos.PosY,WhiteRoomPos.PosZ,0,false,false)
		this.reBuildRoom(BlackRoomPos.PosX,BlackRoomPos.PosY,BlackRoomPos.PosZ,15,true,false)
		this.BuildBoard(BoardPos.PosX,BoardPos.PosY,BoardPos.PosZ)
		this.drawPieces(BoardPos.PosX,BoardPos.PosY,BoardPos.PosZ)
		
	SecondBadX=-1
	SecondBadY=-1

	def placeActualPiece(x,y)
		(board[y])[x]=firstPiece
		(board[firstPositionY])[firstPositionX]={Piece=ChessPiece.Nothing,Color=1}
		firstPositionX=-1
		firstPositionY=-1
		firstPiece={Piece=0,Color=1}
	
		if Turn==WhosTurn.White
			Turn=WhosTurn.Black
		else
			Turn=WhosTurn.White
	
		if WhosTurn.White==Turn
			print("WhitsTurn")
		else
			print("Balcks Turn")

	def static buildIt(int startX,int startY, int startZ,bool tick)
		if tick
			global.ChessGame.Build(startX,startY,startZ)

	def static whiteRoom(int startX,int startY, int startZ,bool tick)
		if tick
			global.ChessGame.BuildRoom(startX,startY,startZ,0,false)

	def static blackRoom(int startX,int startY, int startZ,bool tick)
		if tick 
			global.ChessGame.BuildRoom(startX,startY,startZ,15,true)

	def static playPiece(int X,int Y,bool black,bool tick)
		if tick 
			print(tick+"  diiiidplay")
			global.ChessGame.playAPiece(X,Y,black)
			


	def setBlock(blockType,x,y,z)
		world.getBlockAt(x,y,z).setType(blockType)

	def setMakeSign(x,y,z,isBlack,posX,posY)
		
		world.getBlockAt(x,y,z).makeSign(["AAA|SPOKE","[MC5002]","Chess-playPiece",posX+"-"+posY+"-"+isBlack])

	def setStoneButton(ind,x,y,z)
		world.getBlockAt(x,y,z).makeStoneButton(ind)


	def setBlockAndData(blockType,data,x,y,z)
		world.getBlockAt(x,y,z).setTypeAndData(blockType,data)



	def fillArea(type,startX,startY,startZ,endX,endY,endZ)
		print("start fill ")
		
		
		a1=between(startX,endX)
		a2=between(startY,endY)
		a3=between(startZ,endZ)
		
		
		a1=>|(x)
			a2=>|(y)
				a3=>|(z)
					blk=world.getBlockAt(x,y,z)
					blk.setType(type)

	def fillAreaIf(type,typeIf,startX,startY,startZ,endX,endY,endZ)
		print("start fill ")
		a1=between(startX,endX)
		a2=between(startY,endY)
		a3=between(startZ,endZ)
	
		a1=>|(x)
			a2=>|(y)
				a3=>|(z)
					blk=world.getBlockAt(x,y,z)
					if typeIf==blk.getType()
						blk.setType(type)
	
	
	def fillAreaQuery(query,startX,startY,startZ,endX,endY,endZ)
		print("start fill ")
		a1=between(startX,endX)
		a2=between(startY,endY)
		a3=between(startZ,endZ)
		
		a1=>|(x)
			a2=>|(y)
				a3=>|(z)
					blk=world.getBlockAt(x,y,z)
					gm=query(x,y,z,blk)
					if(gm!=blk)
						blk.setType(gm)


	def between(in1,in2)
		arn=[]
		if(in1>=in2)
			(in1>=in2)=>
				arn.add(in1)
				in1=in1-1
		else
			(in1<=in2)=>
				arn.add(in1)
				in1=in1+1
		return arn

class Location
	PosX=0
	PosY=0
	PosZ=0
	def (xx,yy,zz)
		PosX=xx
		PosY=yy
		PosZ=zz
	

global
	ChessGame=create Chess()


enum BlockType
	Glowstone=89
	Obsidian=49
	Wool=35
	Redstone=55
	Sign=68
	Snow=78
	StoneButton=77
	Glass=20


enum WhosTurn
	White=0
	Black=1


enum Direction 
	North=0
	West=1
	South=2
	East=3

enum ChessPiece
	Nothing=0
	WhiteRook=4
	WhiteKing=5
	WhiteQueen=24
	WhiteBishop=21
	WhiteKnight=48
	WhitePawn=86
	BlackRook=57
	BlackKing=58
	BlackQueen=42
	BlackBishop=82
	BlackKnight=84
	BlackPawn=61

